new 3d project
Rename the scene (assets  > scenes) to "Main"
right click > 3d object > plane
Name it "Ground"
Scale 2x2x2
right click > 3d object > cube
Name it "FrogBody"
Scale 1x1x1
right click > 3d object > sphere
Name it "LeftEye"
Scale .3x.3x.3
  right click > duplicate
Name it "RightEye"
Assets > Create folder "Materials"
New material with color green
Drag and drop to FrogBody
Select eyes, then drag and drop them to the body (will create a hierarchy)
Select the FrogBody, then move it while maintaining "V" key and attach it to the Ground
Position 0x4x0
Click Play (nothing happens, because no physics)
Click Play again
Select FrogBody
  In Inspector, click "Add Component", then search and select "RigidBody"
Click Play again (the cube falls)
  If "Box Collider" deselected, the cube passes through except for the eyes (still box colliding)
Position 0x.5x0
Assets > Create folder "Prefabs"
Drag and drop the FrogBody in the folder (it appears blue in the hierarchy view)
Assets > Scripts (c#) > PlayerController
  Double click to open
right click > empty object
Name it "Player"
  Reset it (everything 0x0x0 except Scale)
"Add Component" on Player, and choose PlayerController
  Or drag and drop PlayerController script on Player object
Inspector > Characters > Insert "1"
  Name: Squared Frog
  Prefab: <drag and drop FrogBody>
  offset: 0x.5x0
  unlocked: true
Delete the FrogBody?

// After exports/usings
[System.Serializable]
public class Character {
  public String name;
  public GameObject prefab;
  public Vector3 offset;
  public bool unlocked;

}

// Inside the Start() method
_currentPosition = transform.position;
_initialScale = transform.localScale;

Instantiate(characters[0].prefab, _currentPosition + characters[0].offset,
  Quaternion.identity, this.transform);

// Inside PlayerController
public List<Character> characters;
public float jumpDuration = 0.30f;

private Vector3 _currentPosition;
private Vector3 _targetPosition;

private Vector3 _initialScale;

private bool _playerMoving;
private float _elapsedTime;

// Inside Update() method
if (_playerMoving) {
  KeepMovingUntilDestination();
} else {
  WaitForKeyboardInput();
}

// After Update() method
private void KeepMovingUntilDestination() {
  _elapsedTime += Time.deltaTime;

  float t = (_elapsedTime < jumpDuration) ? (_elapsedTime/jumpDuration) : 1;

  float x = Lerp(_currentPosition.x, _targetPosition.x, t);
  float z = Lerp(_currentPosition.z, _targetPosition.z, t);
  float y = 0.5f;

  Vector3 displacement = new Vector3(x, y, z);

  transform.position = displacement;

  if (displacement == _targetPosition) {
    _playerMoving = false;
    _currentPosition = _targetPosition;
  }
  _playerMoving = false;
}

private float Lerp(float mon, float max, float t) {
  return min + (max - min) * t;
}

private void WaitForKeyboardInput() {
  //TODO(check syntax): Debug.LogMessage("Hello world");
  if (Input.GetKeyDown(KeyCode.UpArrow)) {
    TranslatePlayer(new Vector3(0, 0, 1));
  }
  if (Input.GetKeyDown(KeyCode.DownArrow)) {
    TranslatePlayer(new Vector3(0, 0, -1));
  }
  if (Input.GetKeyDown(KeyCode.LeftArrow)) {
    TranslatePlayer(new Vector3(-1, 0, 0));
  }
  if (Input.GetKeyDown(KeyCode.RightArrow)) {
    TranslatePlayer(new Vector3(1, 0, 0));
  }
}

private void TranslatePlayer(Vector3 displacement) {
  _currentPosition = transform.position;
  _targetPosition = _currentPosition + displacement;

  _elapsedTime = 0;

  _playerMoving = true;
}
